/*
 * This file is generated by jOOQ.
 */
package com.jacobknowlton.cents.jooq.generated.tables


import com.jacobknowlton.cents.jooq.generated.JPublic
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_ENTRY_ENTRY_DATE
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_ENTRY_UID
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_ENTRY_PKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_ENTRY__BUDGET_ENTRY_CATEGORY_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_ENTRY__BUDGET_ENTRY_VENDOR_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.UNQ_BUDGET_ENTRY_UID
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetCategory.JBudgetCategoryPath
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetVendor.JBudgetVendorPath
import com.jacobknowlton.cents.jooq.generated.tables.records.JBudgetEntryRecord

import java.time.LocalDate
import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class JBudgetEntry(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JBudgetEntryRecord>?,
    parentPath: InverseForeignKey<out Record, JBudgetEntryRecord>?,
    aliased: Table<JBudgetEntryRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JBudgetEntryRecord>(
    alias,
    JPublic.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.budget_entry</code>
         */
        val BUDGET_ENTRY: JBudgetEntry = JBudgetEntry()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JBudgetEntryRecord> = JBudgetEntryRecord::class.java

    /**
     * The column <code>public.budget_entry.iid</code>.
     */
    val IID: TableField<JBudgetEntryRecord, Long?> = createField(DSL.name("iid"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.budget_entry.uid</code>.
     */
    val UID: TableField<JBudgetEntryRecord, String?> = createField(DSL.name("uid"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.budget_entry.entry_date</code>.
     */
    val ENTRY_DATE: TableField<JBudgetEntryRecord, LocalDate?> = createField(DSL.name("entry_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.budget_entry.notes</code>.
     */
    val NOTES: TableField<JBudgetEntryRecord, String?> = createField(DSL.name("notes"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.budget_entry.category_id</code>.
     */
    val CATEGORY_ID: TableField<JBudgetEntryRecord, Long?> = createField(DSL.name("category_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.budget_entry.vendor_id</code>.
     */
    val VENDOR_ID: TableField<JBudgetEntryRecord, Long?> = createField(DSL.name("vendor_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.budget_entry.created_at</code>.
     */
    val CREATED_AT: TableField<JBudgetEntryRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.budget_entry.updated_at</code>.
     */
    val UPDATED_AT: TableField<JBudgetEntryRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<JBudgetEntryRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JBudgetEntryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JBudgetEntryRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.budget_entry</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.budget_entry</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.budget_entry</code> table reference
     */
    constructor(): this(DSL.name("budget_entry"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetEntryRecord>?, parentPath: InverseForeignKey<out Record, JBudgetEntryRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BUDGET_ENTRY, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JBudgetEntryPath : JBudgetEntry, Path<JBudgetEntryRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetEntryRecord>?, parentPath: InverseForeignKey<out Record, JBudgetEntryRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JBudgetEntryRecord>): super(alias, aliased)
        override fun `as`(alias: String): JBudgetEntryPath = JBudgetEntryPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JBudgetEntryPath = JBudgetEntryPath(alias, this)
        override fun `as`(alias: Table<*>): JBudgetEntryPath = JBudgetEntryPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JPublic.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_BUDGET_ENTRY_ENTRY_DATE, IDX_BUDGET_ENTRY_UID)
    override fun getIdentity(): Identity<JBudgetEntryRecord, Long?> = super.getIdentity() as Identity<JBudgetEntryRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<JBudgetEntryRecord> = BUDGET_ENTRY_PKEY
    override fun getUniqueKeys(): List<UniqueKey<JBudgetEntryRecord>> = listOf(UNQ_BUDGET_ENTRY_UID)
    override fun getReferences(): List<ForeignKey<JBudgetEntryRecord, *>> = listOf(BUDGET_ENTRY__BUDGET_ENTRY_CATEGORY_ID_FKEY, BUDGET_ENTRY__BUDGET_ENTRY_VENDOR_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.budget_category</code>
     * table.
     */
    fun budgetCategory(): JBudgetCategoryPath = budgetCategory
    val budgetCategory: JBudgetCategoryPath by lazy { JBudgetCategoryPath(this, BUDGET_ENTRY__BUDGET_ENTRY_CATEGORY_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.budget_vendor</code>
     * table.
     */
    fun budgetVendor(): JBudgetVendorPath = budgetVendor
    val budgetVendor: JBudgetVendorPath by lazy { JBudgetVendorPath(this, BUDGET_ENTRY__BUDGET_ENTRY_VENDOR_ID_FKEY, null) }
    override fun getChecks(): List<Check<JBudgetEntryRecord>> = listOf(
        Internal.createCheck(this, DSL.name("chk_budget_entry_notes_len"), "((char_length(notes) <= 1000))", true),
        Internal.createCheck(this, DSL.name("chk_budget_entry_uid_len"), "((char_length(uid) = 21))", true)
    )
    override fun `as`(alias: String): JBudgetEntry = JBudgetEntry(DSL.name(alias), this)
    override fun `as`(alias: Name): JBudgetEntry = JBudgetEntry(alias, this)
    override fun `as`(alias: Table<*>): JBudgetEntry = JBudgetEntry(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JBudgetEntry = JBudgetEntry(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JBudgetEntry = JBudgetEntry(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JBudgetEntry = JBudgetEntry(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JBudgetEntry = JBudgetEntry(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JBudgetEntry = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JBudgetEntry = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JBudgetEntry = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JBudgetEntry = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JBudgetEntry = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JBudgetEntry = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JBudgetEntry = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JBudgetEntry = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JBudgetEntry = where(DSL.notExists(select))
}
