package com.jacobknowlton.cents.codegen

import java.io.File

class ClassGenerator(
    val schema: Schema,
    val basePackage: String,
    val outputDir: File
) {
    companion object {
        private const val GENERATED_COMMENT = "// This file is generated by the Cents code generator."
        private const val TAB = "    "
    }

    fun generateModelClass() {
        val modelSb = StringBuilder()
        // Package declaration
        modelSb.appendLine(GENERATED_COMMENT)
        modelSb.appendLine()
        modelSb.appendLine("package ${basePackage}.${schema.pkg}.model")
        modelSb.appendLine()
        // Import statements
        val imports = schema.fields
            .filter { it.typePkg != null }
            .map {
                if (it.isRef)
                    "${basePackage}${it.typePkg}.${it.type}"
                else
                    "${it.typePkg}.${it.type}"
            }
            .toMutableSet()
        imports += "java.time.OffsetDateTime" // Import for createdAt and updatedAt fields

        for (import in imports) {
            modelSb.appendLine("import $import")
        }
        modelSb.appendLine()
        // Class declaration
        modelSb.appendLine("data class ${schema.name}(")
        // Fields
        modelSb.appendLine("${TAB}val id: Long,")
        for (field in schema.fields) {
            modelSb.appendLine("${TAB}val ${field.name}: ${field.type}${if (field.isNullable) "? = null" else ""},")
        }
        modelSb.appendLine("${TAB}val createdAt: OffsetDateTime? = null,")
        modelSb.appendLine("${TAB}val updatedAt: OffsetDateTime? = null,")

        modelSb.appendLine(")")


        val outFile = outputDir.resolve("${schema.pkg.replace('.', '/')}/model/${schema.name}.kt")
        outFile.parentFile.mkdirs()
        outFile.writeText(modelSb.toString())
    }

    fun generateRequestClass() {
        val modelSb = StringBuilder()
        // Package declaration
        modelSb.appendLine(GENERATED_COMMENT)
        modelSb.appendLine()
        modelSb.appendLine("package ${basePackage}.${schema.pkg}.model.request")
        modelSb.appendLine()

        val imports = schema.fields
            .filter { it.typePkg != null && !it.isRef }
            .map { "${it.typePkg}.${it.type}" }
            .distinct()

        for (import in imports) {
            modelSb.appendLine("import $import")
        }
        modelSb.appendLine()
        // Class declaration
        modelSb.appendLine("data class ${schema.name}Request(")
        // Fields
        for (field in schema.fields) {
            modelSb.appendLine("${TAB}val ${field.name}${if (field.isRef) "Id" else ""}: ${if (field.isRef) "Long" else field.type}${if (field.isNullable) "? = null" else ""},")
        }
        modelSb.appendLine(")")

        val outFile = outputDir.resolve("${schema.pkg.replace('.', '/')}/model/request/${schema.name}Request.kt")
        outFile.parentFile.mkdirs()
        outFile.writeText(modelSb.toString())
    }


}