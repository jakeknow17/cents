/*
 * This file is generated by jOOQ.
 */
package com.jacobknowlton.cents.jooq.generated.tables


import com.jacobknowlton.cents.jooq.generated.JPublic
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_TRANSACTION_TAG_TAG_ID
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_TRANSACTION_TAG_TRANSACTION_ID
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TAG_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TRANSACTION_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.PK_BUDGET_TRANSACTION_TAG
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetTag.JBudgetTagPath
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetTransaction.JBudgetTransactionPath
import com.jacobknowlton.cents.jooq.generated.tables.records.JBudgetTransactionTagRecord

import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class JBudgetTransactionTag(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JBudgetTransactionTagRecord>?,
    parentPath: InverseForeignKey<out Record, JBudgetTransactionTagRecord>?,
    aliased: Table<JBudgetTransactionTagRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JBudgetTransactionTagRecord>(
    alias,
    JPublic.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.budget_transaction_tag</code>
         */
        val BUDGET_TRANSACTION_TAG: JBudgetTransactionTag = JBudgetTransactionTag()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JBudgetTransactionTagRecord> = JBudgetTransactionTagRecord::class.java

    /**
     * The column
     * <code>public.budget_transaction_tag.budget_transaction_id</code>.
     */
    val BUDGET_TRANSACTION_ID: TableField<JBudgetTransactionTagRecord, Long?> = createField(DSL.name("budget_transaction_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.budget_transaction_tag.budget_tag_id</code>.
     */
    val BUDGET_TAG_ID: TableField<JBudgetTransactionTagRecord, Long?> = createField(DSL.name("budget_tag_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.budget_transaction_tag.created_at</code>.
     */
    val CREATED_AT: TableField<JBudgetTransactionTagRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.budget_transaction_tag.updated_at</code>.
     */
    val UPDATED_AT: TableField<JBudgetTransactionTagRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<JBudgetTransactionTagRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JBudgetTransactionTagRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JBudgetTransactionTagRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.budget_transaction_tag</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.budget_transaction_tag</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.budget_transaction_tag</code> table reference
     */
    constructor(): this(DSL.name("budget_transaction_tag"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetTransactionTagRecord>?, parentPath: InverseForeignKey<out Record, JBudgetTransactionTagRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BUDGET_TRANSACTION_TAG, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JBudgetTransactionTagPath : JBudgetTransactionTag, Path<JBudgetTransactionTagRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetTransactionTagRecord>?, parentPath: InverseForeignKey<out Record, JBudgetTransactionTagRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JBudgetTransactionTagRecord>): super(alias, aliased)
        override fun `as`(alias: String): JBudgetTransactionTagPath = JBudgetTransactionTagPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JBudgetTransactionTagPath = JBudgetTransactionTagPath(alias, this)
        override fun `as`(alias: Table<*>): JBudgetTransactionTagPath = JBudgetTransactionTagPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JPublic.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_BUDGET_TRANSACTION_TAG_TAG_ID, IDX_BUDGET_TRANSACTION_TAG_TRANSACTION_ID)
    override fun getPrimaryKey(): UniqueKey<JBudgetTransactionTagRecord> = PK_BUDGET_TRANSACTION_TAG
    override fun getReferences(): List<ForeignKey<JBudgetTransactionTagRecord, *>> = listOf(BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TAG_ID_FKEY, BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TRANSACTION_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.budget_tag</code> table.
     */
    fun budgetTag(): JBudgetTagPath = budgetTag
    val budgetTag: JBudgetTagPath by lazy { JBudgetTagPath(this, BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TAG_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.budget_transaction</code>
     * table.
     */
    fun budgetTransaction(): JBudgetTransactionPath = budgetTransaction
    val budgetTransaction: JBudgetTransactionPath by lazy { JBudgetTransactionPath(this, BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TRANSACTION_ID_FKEY, null) }
    override fun `as`(alias: String): JBudgetTransactionTag = JBudgetTransactionTag(DSL.name(alias), this)
    override fun `as`(alias: Name): JBudgetTransactionTag = JBudgetTransactionTag(alias, this)
    override fun `as`(alias: Table<*>): JBudgetTransactionTag = JBudgetTransactionTag(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JBudgetTransactionTag = JBudgetTransactionTag(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JBudgetTransactionTag = JBudgetTransactionTag(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JBudgetTransactionTag = JBudgetTransactionTag(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JBudgetTransactionTag = JBudgetTransactionTag(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JBudgetTransactionTag = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JBudgetTransactionTag = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JBudgetTransactionTag = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JBudgetTransactionTag = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JBudgetTransactionTag = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JBudgetTransactionTag = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JBudgetTransactionTag = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JBudgetTransactionTag = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JBudgetTransactionTag = where(DSL.notExists(select))
}
