/*
 * This file is generated by jOOQ.
 */
package com.jacobknowlton.cents.jooq.generated.tables


import com.jacobknowlton.cents.jooq.generated.JPublic
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_TRANSACTION_DATE
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_TRANSACTION_DESCRIPTION
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_TRANSACTION_NOTES
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION_PKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TRANSACTION_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_ACCOUNT_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_CATEGORY_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_VENDOR_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetAccount.JBudgetAccountPath
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetCategory.JBudgetCategoryPath
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetTag.JBudgetTagPath
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetTransactionTag.JBudgetTransactionTagPath
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetVendor.JBudgetVendorPath
import com.jacobknowlton.cents.jooq.generated.tables.records.JBudgetTransactionRecord

import java.math.BigDecimal
import java.time.LocalDate
import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class JBudgetTransaction(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JBudgetTransactionRecord>?,
    parentPath: InverseForeignKey<out Record, JBudgetTransactionRecord>?,
    aliased: Table<JBudgetTransactionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JBudgetTransactionRecord>(
    alias,
    JPublic.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.budget_transaction</code>
         */
        val BUDGET_TRANSACTION: JBudgetTransaction = JBudgetTransaction()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JBudgetTransactionRecord> = JBudgetTransactionRecord::class.java

    /**
     * The column <code>public.budget_transaction.id</code>.
     */
    val ID: TableField<JBudgetTransactionRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.budget_transaction.transaction_date</code>.
     */
    val TRANSACTION_DATE: TableField<JBudgetTransactionRecord, LocalDate?> = createField(DSL.name("transaction_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.budget_transaction.amount</code>.
     */
    val AMOUNT: TableField<JBudgetTransactionRecord, BigDecimal?> = createField(DSL.name("amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    /**
     * The column <code>public.budget_transaction.type</code>.
     */
    val TYPE: TableField<JBudgetTransactionRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.budget_transaction.description</code>.
     */
    val DESCRIPTION: TableField<JBudgetTransactionRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.budget_transaction.notes</code>.
     */
    val NOTES: TableField<JBudgetTransactionRecord, String?> = createField(DSL.name("notes"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.budget_transaction.budget_category_id</code>.
     */
    val BUDGET_CATEGORY_ID: TableField<JBudgetTransactionRecord, Long?> = createField(DSL.name("budget_category_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.budget_transaction.budget_vendor_id</code>.
     */
    val BUDGET_VENDOR_ID: TableField<JBudgetTransactionRecord, Long?> = createField(DSL.name("budget_vendor_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.budget_transaction.budget_account_id</code>.
     */
    val BUDGET_ACCOUNT_ID: TableField<JBudgetTransactionRecord, Long?> = createField(DSL.name("budget_account_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.budget_transaction.created_at</code>.
     */
    val CREATED_AT: TableField<JBudgetTransactionRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.budget_transaction.updated_at</code>.
     */
    val UPDATED_AT: TableField<JBudgetTransactionRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<JBudgetTransactionRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JBudgetTransactionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JBudgetTransactionRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.budget_transaction</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.budget_transaction</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.budget_transaction</code> table reference
     */
    constructor(): this(DSL.name("budget_transaction"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetTransactionRecord>?, parentPath: InverseForeignKey<out Record, JBudgetTransactionRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BUDGET_TRANSACTION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JBudgetTransactionPath : JBudgetTransaction, Path<JBudgetTransactionRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetTransactionRecord>?, parentPath: InverseForeignKey<out Record, JBudgetTransactionRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JBudgetTransactionRecord>): super(alias, aliased)
        override fun `as`(alias: String): JBudgetTransactionPath = JBudgetTransactionPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JBudgetTransactionPath = JBudgetTransactionPath(alias, this)
        override fun `as`(alias: Table<*>): JBudgetTransactionPath = JBudgetTransactionPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JPublic.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_BUDGET_TRANSACTION_DATE, IDX_BUDGET_TRANSACTION_DESCRIPTION, IDX_BUDGET_TRANSACTION_NOTES)
    override fun getIdentity(): Identity<JBudgetTransactionRecord, Long?> = super.getIdentity() as Identity<JBudgetTransactionRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<JBudgetTransactionRecord> = BUDGET_TRANSACTION_PKEY
    override fun getReferences(): List<ForeignKey<JBudgetTransactionRecord, *>> = listOf(BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_ACCOUNT_ID_FKEY, BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_CATEGORY_ID_FKEY, BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_VENDOR_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.budget_account</code>
     * table.
     */
    fun budgetAccount(): JBudgetAccountPath = budgetAccount
    val budgetAccount: JBudgetAccountPath by lazy { JBudgetAccountPath(this, BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_ACCOUNT_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.budget_category</code>
     * table.
     */
    fun budgetCategory(): JBudgetCategoryPath = budgetCategory
    val budgetCategory: JBudgetCategoryPath by lazy { JBudgetCategoryPath(this, BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_CATEGORY_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.budget_vendor</code>
     * table.
     */
    fun budgetVendor(): JBudgetVendorPath = budgetVendor
    val budgetVendor: JBudgetVendorPath by lazy { JBudgetVendorPath(this, BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_VENDOR_ID_FKEY, null) }

    private lateinit var _budgetTransactionTag: JBudgetTransactionTagPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.budget_transaction_tag</code> table
     */
    fun budgetTransactionTag(): JBudgetTransactionTagPath {
        if (!this::_budgetTransactionTag.isInitialized)
            _budgetTransactionTag = JBudgetTransactionTagPath(this, null, BUDGET_TRANSACTION_TAG__BUDGET_TRANSACTION_TAG_BUDGET_TRANSACTION_ID_FKEY.inverseKey)

        return _budgetTransactionTag;
    }

    val budgetTransactionTag: JBudgetTransactionTagPath
        get(): JBudgetTransactionTagPath = budgetTransactionTag()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.budget_tag</code> table
     */
    val budgetTag: JBudgetTagPath
        get(): JBudgetTagPath = budgetTransactionTag().budgetTag()
    override fun getChecks(): List<Check<JBudgetTransactionRecord>> = listOf(
        Internal.createCheck(this, DSL.name("chk_budget_transaction_description_len"), "((char_length(description) <= 255))", true),
        Internal.createCheck(this, DSL.name("chk_budget_transaction_notes_len"), "((char_length(notes) <= 1000))", true),
        Internal.createCheck(this, DSL.name("chk_budget_transaction_type_len"), "((char_length(type) <= 255))", true)
    )
    override fun `as`(alias: String): JBudgetTransaction = JBudgetTransaction(DSL.name(alias), this)
    override fun `as`(alias: Name): JBudgetTransaction = JBudgetTransaction(alias, this)
    override fun `as`(alias: Table<*>): JBudgetTransaction = JBudgetTransaction(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JBudgetTransaction = JBudgetTransaction(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JBudgetTransaction = JBudgetTransaction(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JBudgetTransaction = JBudgetTransaction(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JBudgetTransaction = JBudgetTransaction(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JBudgetTransaction = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JBudgetTransaction = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JBudgetTransaction = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JBudgetTransaction = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JBudgetTransaction = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JBudgetTransaction = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JBudgetTransaction = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JBudgetTransaction = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JBudgetTransaction = where(DSL.notExists(select))
}
