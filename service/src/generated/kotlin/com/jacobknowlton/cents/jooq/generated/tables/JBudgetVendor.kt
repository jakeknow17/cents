/*
 * This file is generated by jOOQ.
 */
package com.jacobknowlton.cents.jooq.generated.tables


import com.jacobknowlton.cents.jooq.generated.JPublic
import com.jacobknowlton.cents.jooq.generated.indexes.IDX_BUDGET_VENDOR_NAME
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_VENDOR_ID_FKEY
import com.jacobknowlton.cents.jooq.generated.keys.BUDGET_VENDOR_PKEY
import com.jacobknowlton.cents.jooq.generated.keys.UNQ_BUDGET_VENDOR_NAME
import com.jacobknowlton.cents.jooq.generated.tables.JBudgetTransaction.JBudgetTransactionPath
import com.jacobknowlton.cents.jooq.generated.tables.records.JBudgetVendorRecord

import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class JBudgetVendor(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JBudgetVendorRecord>?,
    parentPath: InverseForeignKey<out Record, JBudgetVendorRecord>?,
    aliased: Table<JBudgetVendorRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JBudgetVendorRecord>(
    alias,
    JPublic.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.budget_vendor</code>
         */
        val BUDGET_VENDOR: JBudgetVendor = JBudgetVendor()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JBudgetVendorRecord> = JBudgetVendorRecord::class.java

    /**
     * The column <code>public.budget_vendor.id</code>.
     */
    val ID: TableField<JBudgetVendorRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.budget_vendor.name</code>.
     */
    val NAME: TableField<JBudgetVendorRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.budget_vendor.link</code>.
     */
    val LINK: TableField<JBudgetVendorRecord, String?> = createField(DSL.name("link"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.budget_vendor.created_at</code>.
     */
    val CREATED_AT: TableField<JBudgetVendorRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.budget_vendor.updated_at</code>.
     */
    val UPDATED_AT: TableField<JBudgetVendorRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<JBudgetVendorRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JBudgetVendorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JBudgetVendorRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.budget_vendor</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.budget_vendor</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.budget_vendor</code> table reference
     */
    constructor(): this(DSL.name("budget_vendor"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetVendorRecord>?, parentPath: InverseForeignKey<out Record, JBudgetVendorRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BUDGET_VENDOR, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JBudgetVendorPath : JBudgetVendor, Path<JBudgetVendorRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, JBudgetVendorRecord>?, parentPath: InverseForeignKey<out Record, JBudgetVendorRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<JBudgetVendorRecord>): super(alias, aliased)
        override fun `as`(alias: String): JBudgetVendorPath = JBudgetVendorPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JBudgetVendorPath = JBudgetVendorPath(alias, this)
        override fun `as`(alias: Table<*>): JBudgetVendorPath = JBudgetVendorPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JPublic.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_BUDGET_VENDOR_NAME)
    override fun getIdentity(): Identity<JBudgetVendorRecord, Long?> = super.getIdentity() as Identity<JBudgetVendorRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<JBudgetVendorRecord> = BUDGET_VENDOR_PKEY
    override fun getUniqueKeys(): List<UniqueKey<JBudgetVendorRecord>> = listOf(UNQ_BUDGET_VENDOR_NAME)

    private lateinit var _budgetTransaction: JBudgetTransactionPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.budget_transaction</code> table
     */
    fun budgetTransaction(): JBudgetTransactionPath {
        if (!this::_budgetTransaction.isInitialized)
            _budgetTransaction = JBudgetTransactionPath(this, null, BUDGET_TRANSACTION__BUDGET_TRANSACTION_BUDGET_VENDOR_ID_FKEY.inverseKey)

        return _budgetTransaction;
    }

    val budgetTransaction: JBudgetTransactionPath
        get(): JBudgetTransactionPath = budgetTransaction()
    override fun getChecks(): List<Check<JBudgetVendorRecord>> = listOf(
        Internal.createCheck(this, DSL.name("chk_budget_vendor_link_len"), "((char_length(name) <= 1000))", true),
        Internal.createCheck(this, DSL.name("chk_budget_vendor_name_len"), "((char_length(name) <= 255))", true)
    )
    override fun `as`(alias: String): JBudgetVendor = JBudgetVendor(DSL.name(alias), this)
    override fun `as`(alias: Name): JBudgetVendor = JBudgetVendor(alias, this)
    override fun `as`(alias: Table<*>): JBudgetVendor = JBudgetVendor(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JBudgetVendor = JBudgetVendor(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JBudgetVendor = JBudgetVendor(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JBudgetVendor = JBudgetVendor(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JBudgetVendor = JBudgetVendor(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JBudgetVendor = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JBudgetVendor = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JBudgetVendor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JBudgetVendor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JBudgetVendor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JBudgetVendor = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JBudgetVendor = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JBudgetVendor = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JBudgetVendor = where(DSL.notExists(select))
}
